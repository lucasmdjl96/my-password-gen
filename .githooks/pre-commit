#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
  # Note that the use of brackets around a tr range is ok here, (it's
  # even required, for portability to Solaris 10's /usr/bin/tr), since
  # the square bracket bytes happen to fall in the designated range.
  test $(git diff --cached --name-only --diff-filter=A -z $against |
    LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
  cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
  exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
if ! git diff-index --check --cached "$against" -- ; then
  exit 1
fi

# First get the names of secret files
secrets=""
for line in $(xargs < ./.gitsecret/paths/mapping.cfg); do
  secret="$(cut -d : -f1 <<< "$line")"
  if [ -z "$secrets" ]; then
    secrets="$secret"
  else
    secrets="$secrets|$secret"
  fi
done
# If some secrets are going to be committed, fail
# shellcheck disable=SC2143
if git status --porcelain -uall | grep -v '.secret' | grep -Eq "$secrets"; then
  cat <<\EOF
Error: Git is tracking a secret file.

Please add all secret files to .gitignore before commit.

EOF
  exit 1
fi

for file in ${secrets//|/ }
do
  sha=$(sha256sum "$file" | cut -d ' ' -f1)
  stored_sha="$(grep "$file:" ./.gitsecret/paths/mapping.cfg | cut -d : -f2)"
  if [ "$sha" != "$stored_sha" ]; then
    cat <<\EOF
Error: Secret has changed but encrypted secret has not.

Please hide secrets before commit.

EOF
    exit 1
  fi
done

encrypted_secrets="${secrets//|/.secret|}.secret"

if git diff --name-only | grep -Eq "$encrypted_secrets"; then
  cat <<\EOF
Error: Encrypted secret changed but not staged to commit.

Please stage encrypted secrets before commit.

EOF
  exit 1
fi

if git status --porcelain -uall | grep -q '??' | grep -Eq "$encrypted_secrets"; then
  cat <<\EOF
Error: Encrypted secret added but not staged to commit.

Please stage encrypted secrets before commit.

EOF
  exit 1
fi

exit 0
