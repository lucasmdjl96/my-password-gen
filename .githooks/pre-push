#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha> <remote ref> <remote sha>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

zero=0000000000000000000000000000000000000000

previous_branch=$(git rev-parse --abbrev-ref '@{-1}')
current_branch=$(git rev-parse --abbrev-ref '@')

function restore {
  if [ -n "$previous_branch" ]; then git switch "$previous_branch"; fi
  git switch "$current_branch"
  STASH_NUM=$(git stash list | grep "$STASH_NAME" | sed -re 's/stash@\{(.*)\}.*/\1/')
  if [ -n "$STASH_NUM" ]; then
    # shellcheck disable=SC1083
    git stash pop -q stash@{"$STASH_NUM"}
  fi
}

STASH_NAME="pre-push-$(date +%s)"
git stash save -q --keep-index "$STASH_NAME"

while read -r local_ref local_sha remote_ref remote_sha
do
  if [ "$local_sha" = "$zero" ]; then
    # Handle delete
    continue
  else
    if [ "$remote_sha" = "$zero" ]; then
      # New branch, examine all commits
      range="$local_sha"
    else
      # Update to existing branch, examine new commits
      range="$remote_sha..$local_sha"
    fi

    # Check for WIP commit
    commit=$(git rev-list -n 1 --grep '^WIP' "$range")
    if [ -n "$commit" ]; then
      echo >&2 "Found WIP commit in $local_ref, not pushing"
      exit 1
    fi
    git checkout "$local_sha"
    ./gradlew clean check -q > /dev/null
    # shellcheck disable=SC2181
    if [ $? -ne 0 ]; then
      echo >&2 "Some tests failed. Not pushing."
      restore
      exit 1
    fi
    if [ "$remote_ref" = "release" ]; then
      if ! git tag --points-at "$local_sha" | grep -Eq '^[Vv][0-9]+(?\.[0-9]+){0,2}(?-[a-zA-Z0-9]+)?$'; then
        echo >&2 "Not pushing to release without version tags."
        restore
        exit 1
      fi
    fi
  fi
done

restore

exit 0
